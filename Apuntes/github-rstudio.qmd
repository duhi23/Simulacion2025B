---
title: "Gu√≠a para sincronizar GitHub con RStudio"
author: "Diego Pa√∫l Huaraca S."
date: "2025-09-30"
format: html
toc: true
number-sections: true
---

# Introducci√≥n

Esta gu√≠a resume los principales pasos a realizar para **vincular RStudio con una cuentan de GitHub**, permitiendo versionar proyectos, trabajar en equipo y mantener un flujo de trabajo reproducible.

Usar GitHub junto con RStudio tiene el poder de revolucionar la forma en que trabaja en R.

## ¬øPor qu√© deber√≠a usar Git y GitHub?

-   **Control de versiones**: Permite rastrear cambios en el c√≥digo y revertir a versiones anteriores si es necesario.\

-   **Colaboraci√≥n**: Facilita el trabajo en equipo, permitiendo que varios usuarios trabajen en el mismo proyecto sin conflictos.\

-   **Reproducibilidad**: Mantiene un historial claro de cambios, lo que es crucial para la investigaci√≥n cient√≠fica y acad√©mica.

-   **Integraci√≥n con RStudio**: RStudio ofrece una interfaz amigable para trabajar con Git y GitHub, simplificando muchas tareas comunes.

------------------------------------------------------------------------

## Requisitos previos

Antes de comenzar, aseg√∫rate de tener:

-   Una cuenta en [GitHub](https://github.com)\

-   **R** y **RStudio** instalados (es posible realizar la vinculaci√≥n de la cuenta GitHub con otros IDES, por ejemplo: Positron, Visual Studio Code de manera an√°loga.)\

-   **Git** instalado en tu computadora (verifica con `git --version` en la terminal), de lo contrario puedes descargarlo [Git](https://git-scm.com/downloads)\

------------------------------------------------------------------------

# Resumen de pasos a seguir

A continuaci√≥n, se describen los pasos a dentro de una configuraci√≥n tradicional.

## Paso 1: Configurar Git en tu equipo

Abre la terminal (o la consola en RStudio) y ejecuta los siguientes comandos de manera separada:

```{r}
#| eval: false
#| echo: true
git config --global user.name "UsuarioGitHub"
git config --global user.email "tu_correo_registrado@ejemplo.com"
```

üìå Estos datos deben coincidir con los de tu cuenta en GitHub.

------------------------------------------------------------------------

## Paso 2: Crear un repositorio en GitHub

1.  Ingresa a tu cuenta de GitHub y haz clic en **New Repository**.\

2.  Asigna un nombre, una descripci√≥n y elige si ser√° p√∫blico o privado (de manera que sea visible o no dentro de la web).\

3.  No es obligatorio inicializar con **README** (en el caso que el proyecto conlleve el desarrollo de gran cantidad de c√≥digo es recomendable presentar una descripci√≥n amplia del c√≥digo almacenado en el repositorio).

```{mermaid}
flowchart TD
  A[GitHub] --> B[New Repository]
  B --> C[Asignar nombre y opciones]
  C --> D[Crear repositorio vac√≠o]
```

------------------------------------------------------------------------

## Paso 3: Conectar RStudio con GitHub

En RStudio:

1.  **Crear un nuevo proyecto**:
    -   `File` ‚Üí `New Project` ‚Üí `Version Control` ‚Üí `Git`\
    
2.  Ingresa la **URL del repositorio de GitHub**.\

    -   La URL se encuentra en la p√°gina del repositorio en GitHub, bot√≥n `Code` ‚Üí `HTTPS` ‚Üí `copiar URL`.\
    
3.  Selecciona la carpeta local donde se guardar√° el proyecto.

```{mermaid}
flowchart LR
  A[RStudio] --> B[New Project]
  B --> C[Version Control]
  C --> D[Git]
  D --> E[Ingresar URL de GitHub]
```

------------------------------------------------------------------------

## Paso 4: Autenticaci√≥n con GitHub

Desde 2022, GitHub **no permite autenticaci√≥n por medio de contrase√±a**. Para la autenticaci√≥n se debe usar un **Token Personal de Acceso (PAT)** (mayor seguridad en la transmisi√≥n de datos).

1.  En GitHub, ir a:
    -   `Settings` ‚Üí `Developer settings` ‚Üí `Personal access tokens` ‚Üí `Generate new token` \
    
2.  Generar un nuevo **token cl√°sico** con permisos: `repo`, `workflow` y `user`.\

3.  Clic en el bot√≥n **Generate token**.

4.  Copie el token obtenido para usarlo en la autenticaci√≥n desde git (por ejemplo: ghp_XXXYYY1234ZZZZ4672Fefghh).

En RStudio, usar el paquete **`gitcreds`**:

```{r}
#| eval: false
#| echo: true
install.packages("gitcreds")
library(gitcreds)

# Configurar las credenciales
gitcreds_set()

# Visualizar las credenciales
gitcreds_get()
```

üëâ Pega tu **PAT** cuando lo solicite.

Este √∫ltimo paso es crucial para evitar la autenticaci√≥n por contrase√±a en cada operaci√≥n con GitHub.

------------------------------------------------------------------------

## Paso 5: Flujo b√°sico de trabajo

A partir de aqu√≠, podr√°s trabajar con Git y GitHub directamente desde RStudio.

| Acci√≥n            | Comando Git               | Desde RStudio               |
|-------------------|--------------------------|----------------------------|
| Ver estado        | `git status`              | Bot√≥n *Git ‚Üí Commit*        |
| A√±adir cambios    | `git add archivo.R`       | Marcar archivo en panel Git |
| Guardar commit    | `git commit -m "mensaje"` | Bot√≥n *Commit*              |
| Subir a GitHub    | `git push`                | Bot√≥n *Push*                |
| Descargar cambios | `git pull`                | Bot√≥n *Pull*                |

------------------------------------------------------------------------

## Esquema general del proceso

```{mermaid}

sequenceDiagram
  participant RStudio
  participant GitHub
  RStudio->>GitHub: git push (subir cambios)
  GitHub->>RStudio: git pull (descargar cambios)
```

- **Push**: Env√≠a los cambios locales al repositorio remoto en GitHub.\
- **Pull**: Trae los cambios del repositorio remoto a tu copia local.

------------------------------------------------------------------------

# Conclusi√≥n

Ahora tienes configurado un flujo de trabajo completo:

-   Creas proyectos en RStudio.\
-   Versionas el c√≥digo con Git.\
-   Sincronizas los cambios con GitHub.

Esto fomenta la **colaboraci√≥n**, la **reproducibilidad** y las **buenas pr√°cticas acad√©micas y cient√≠ficas**.

------------------------------------------------------------------------
